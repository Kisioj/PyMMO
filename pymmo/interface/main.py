# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import time

from PySide6 import QtCore, QtGui, QtWidgets
from PySide6.QtCore import QEvent, Qt
from PySide6.QtGui import QTextCursor, QIcon, QAction
from PySide6.QtWebEngineWidgets import QWebEngineView
from PySide6.QtWidgets import QApplication, QMainWindow, QMenu

from pymmo.interface.opengl_widget import OpenGLWidget
from pymmo.interface.statpanel_widget import StatPanelWidget
from pymmo.interface.verbs_widget import VerbsWidget
from pymmo.interface import ui

from pymmo.interface.forceheight import VerbWidget, ChangingHeightWidget


class CentralWidget(QtWidgets.QWidget):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # self.installEventFilter(self)

    def mousePressEvent(self, event):
        print('CentralWidget.mousePressEvent', time.perf_counter())

    # def eventFilter(self, source, event):
    #
    #     if event.type() == QEvent.ContextMenu:
    #
    #         print('CentralWidget.eventFilter', time.perf_counter(), type(source))
    #         print('!!!', event.type())
    #         menu = QMenu()
    #         action = QAction('Action 1')
    #         action.setIcon(QIcon('/home/kisioj/Pictures/awaria.png'))
    #         menu.addAction(action)
    #         menu.addAction('Action 2')
    #         menu.addAction('Action 3')
    #
    #         menu.exec_(event.globalPos())
    #
    #         # if menu.exec_(event.globalPos()):
    #         #     item = source.itemAt(event.pos())
    #         #     print(item.text())
    #         return True
    #
    #     return super().eventFilter(source, event)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(729, 600)
        MainWindow.setDocumentMode(False)
        MainWindow.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.centralwidget = CentralWidget(MainWindow)
        # self.centralwidget = QtWidgets.QWidget(MainWindow)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.verticalLayout.setObjectName("verticalLayout")
        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")

        self.map_view = OpenGLWidget(self.splitter)
        self.map_view.resize(800, 600)
        # self.map_view .setFixedSize(800, 600)


        self.widget = QtWidgets.QWidget(self.splitter)
        self.widget.setObjectName("widget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontal_layout_top_buttons = QtWidgets.QHBoxLayout()
        self.horizontal_layout_top_buttons.setObjectName("horizontalLayout_2")

        self.selected_button = None
        self.button_text = QtWidgets.QPushButton(self.widget)

        def button_text_on_select():
            print("button_text_on_select")

        def button_text_on_unselect():
            print("button_text_on_unselect")

        self.button_text.setCheckable(True)
        self.button_text.setObjectName("button_text")
        self.button_text.setText("Text")
        self.button_text.setAutoExclusive(True)
        self.button_text.onSelect = button_text_on_select
        self.button_text.onUnselect = button_text_on_unselect

        def button_select(button):
            if self.selected_button is button:
                return

            if self.selected_button:
                self.selected_button.onUnselect()

            button.onSelect()
            self.selected_button = button

        # self.button_text.clicked.connect(button_text_click)
        self.button_text.clicked.connect(lambda: button_select(self.button_text))

        self.button_browser = QtWidgets.QPushButton(self.widget)
        self.button_browser.setObjectName("button_browser")
        self.button_browser.setCheckable(True)
        self.button_browser.setText("Browser")
        self.button_browser.setAutoExclusive(True)
        # self.button_browser.setFocusPolicy(Qt.NoFocus)

        def button_browser_on_select():
            self.browser.show()
            print("button_browser_on_select")

        def button_browser_on_unselect():
            self.browser.hide()
            print("button_browser_on_unselect")

        self.button_browser.onSelect = button_browser_on_select
        self.button_browser.onUnselect = button_browser_on_unselect
        self.button_browser.clicked.connect(lambda: button_select(self.button_browser))

        self.button_info = QtWidgets.QPushButton(self.widget)
        self.button_info.setObjectName("button_info")
        self.button_info.setCheckable(True)
        self.button_info.setChecked(True)
        self.selected_button = self.button_info
        self.button_info.setText("Info")
        self.button_info.setAutoExclusive(True)

        def button_info_on_select():
            self.tabs.show()
            print("button_info_on_select")

        def button_info_on_unselect():
            self.tabs.hide()
            print("button_info_on_unselect")

        self.button_info.onSelect = button_info_on_select
        self.button_info.onUnselect = button_info_on_unselect
        self.button_info.clicked.connect(lambda: button_select(self.button_info))

        # self.top_buttons = [self.button_text, self.button_browser, self.button_info]

        self.horizontal_layout_top_buttons.addWidget(self.button_text)
        self.horizontal_layout_top_buttons.addWidget(self.button_browser)
        self.horizontal_layout_top_buttons.addWidget(self.button_info)

        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontal_layout_top_buttons.addItem(spacerItem)

        self.verticalLayout_2.addLayout(self.horizontal_layout_top_buttons)
        self.splitter_3 = QtWidgets.QSplitter(self.widget)
        self.splitter_3.setOrientation(QtCore.Qt.Vertical)

        self.tabs = QtWidgets.QTabWidget(self.splitter_3)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabs.sizePolicy().hasHeightForWidth())
        self.tabs.setSizePolicy(sizePolicy)
        self.tabs.setMinimumSize(QtCore.QSize(0, 150))

        self.tab_stats = StatPanelWidget()
        self.tab_stats.stat("Username", {'text': 'Kisioj'})
        self.tab_stats.stat("TextLabel",
                            {'text': "TextLabel TextLabel TextLabel TextLabel TextLabel",
                             'icon': '/home/kisioj/Pictures/awaria.png'})
        self.tab_stats.stat("TextLabel", {'text': 'TextLabelTextLabelTextLabelTextLabel'})
        self.tab_stats.refresh()
        self.tabs.addTab(self.tab_stats, "Stats")

        self.tab_inventory = StatPanelWidget()
        self.tab_inventory.stat("", {'text': "Armor", 'icon': '/home/kisioj/Pictures/awaria.png'})
        self.tab_inventory.stat("", {'text': "Sword", 'icon': '/home/kisioj/Pictures/awaria.png'})
        self.tab_inventory.stat("", {'text': "Boots", 'icon': '/home/kisioj/Pictures/awaria.png'})
        self.tab_inventory.refresh()
        self.tabs.addTab(self.tab_inventory, "Inventory")

        self.tab_verbs = VerbsWidget()
        self.tab_verbs.set_verbs(
            ['przeorganizować', 'zmienić', 'zmieniać', 'poprawić', 'poprawiać', 'przestawić', 'przesunąć', 'przesuwać',
             'przestawiać', 'przełożyć', 'przekładać', 'przemeblować', 'przemeblowywać'])

        self.tabs.addTab(self.tab_verbs, "Verbs")
        # self.browser = QtWidgets.QTextBrowser(self.splitter_3)
        self.browser = QWebEngineView(self.splitter_3)
        self.browser.hide()
        self.browser.setObjectName("textBrowser")
        self.browser.setHtml('<p>HELLO</p><p>HI</p><a href="http://google.pl">GOOGLE</a>')

        # self.output = QtWidgets.QTextEdit(self.splitter_3)
        self.output = QtWidgets.QTextEdit(self.splitter_3)
        self.output.setStyleSheet('QTextEdit {background: white;}')
        self.output.document().setMaximumBlockCount(1000)  # TODO it's actually 999?
        # https://newbedev.com/how-to-append-text-to-qplaintextedit-without-adding-newline-and-keep-scroll-at-the-bottom
        # self.output.setMaxi
        self.output.setReadOnly(True)
        self.output.setObjectName("textEdit")
        self.verticalLayout_2.addWidget(self.splitter_3)
        self.verticalLayout.addWidget(self.splitter)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetMaximumSize)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setText("")
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.setStyleSheet("QLineEdit { background-color: lightgray; }")

        def say(line_edit):
            print(line_edit.text())
            # line_edit.text
            # self.output.moveCursor(QTextCursor.End)
            # self.output.insertHtml(f'<p>{line_edit.text()}</p>')
            # self.output.moveCursor(QTextCursor.End)
            # self.output.insertPlainText(line_edit.text() + '\n')
            self.output.append(f'<span style="color: red;">Kisioj</span>: {line_edit.text()}')
            line_edit.setText("")

        self.lineEdit.returnPressed.connect(lambda: say(self.lineEdit))
        self.horizontalLayout_4.addWidget(self.lineEdit)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetNoConstraint)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.button_chat = QtWidgets.QPushButton(self.centralwidget)
        self.button_chat.setMaximumSize(QtCore.QSize(50, 16777215))
        self.button_chat.setObjectName("pushButton_4")
        self.horizontalLayout.addWidget(self.button_chat)
        self.button_alt = QtWidgets.QPushButton(self.centralwidget)
        self.button_alt.setMaximumSize(QtCore.QSize(50, 16777215))
        self.button_alt.setObjectName("pushButton_6")
        self.horizontalLayout.addWidget(self.button_alt)
        self.button_host = QtWidgets.QPushButton(self.centralwidget)
        self.button_host.setMaximumSize(QtCore.QSize(50, 16777215))
        self.button_host.setObjectName("pushButton_7")
        self.horizontalLayout.addWidget(self.button_host)
        self.horizontalLayout_4.addLayout(self.horizontalLayout)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout_3.addLayout(self.verticalLayout)
        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 729, 22))
        self.menubar.setObjectName("menubar")


        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setTitle("File")

        self.actionQuit = QAction(MainWindow)
        self.actionQuit.setText("Quit")
        self.menuFile.addAction(self.actionQuit)


        self.menuIcons = QtWidgets.QMenu(self.menubar)
        self.menuIcons.setTitle("Icons")

        self.actionStretch = QAction(MainWindow)
        self.actionStretch.setText("Stretch to fit")
        self.menuIcons.addAction(self.actionStretch)
        self.actionIcon32 = QAction(MainWindow)
        self.actionIcon32.setText("32x32")
        self.menuIcons.addAction(self.actionIcon32)
        self.actionIcon16 = QAction(MainWindow)
        self.actionIcon16.setText("16x16")
        self.menuIcons.addAction(self.actionIcon16)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuIcons.menuAction())

        MainWindow.setMenuBar(self.menubar)


        self.status_bar = QtWidgets.QStatusBar(MainWindow)
        self.status_bar.setObjectName("statusBar")
        self.status_bar.showMessage("---")
        MainWindow.setStatusBar(self.status_bar)

        MainWindow.setWindowTitle("pymmo")
        self.button_chat.setText("Chat")
        self.button_alt.setText("Alt")
        self.button_host.setText("Host...")


def run_app():
    app = QApplication(sys.argv)
    MainWindow = QMainWindow()
    ui.widgets = Ui_MainWindow()
    ui.widgets.setupUi(MainWindow)
    MainWindow.show()
    # scene = Scene()
    sys.exit(app.exec())

if __name__ == '__main__':
    run_app()
